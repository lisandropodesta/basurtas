@page "/bazas/{uid}"
@using Bazurtas.Model;
@using CardGames;
@using CardGames.Bazas;
@inherits GamePage
@inject IJSRuntime jsRuntime

<div class="main">
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="navbar-collapse align-middle">
            <ul class="navbar-nav mr-auto">
                <li />
                <li class="nav-item mr-2">
                    <h3>@player.NickName &#124;</h3>
                </li>

                @switch (GameState)
                {
                    case BazasState.Build:
                        <li class="nav-item my-2 my-lg-0">
                            <div class="form-inline">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="basic-addon1">Ingresa tu nombre</span>
                                </div>
                                <input class="form-control mr-sm-2" type="text" placeholder="" aria-label="NickGame" @bind="InputNickName">
                                <button type="button" class="btn btn-primary" @onclick="SetNickName">Asignar</button>
                            </div>
                        </li>

                        @if (IsCreator)
                        {
                            <li class="nav-item ml-1">
                                <button type="button" class="btn btn-primary" @onclick="Start">Iniciar Partida</button>
                            </li>
                        }

                        <li class="nav-item ml-2">
                            <h3>Jugadores: @PlayersListText (@PlayersNumber)</h3>
                        </li>
                        break;

                    case BazasState.HandFinished:
                        <li class="nav-item ml-1">
                            <h3>Baza ganada por @Game.HandWinner?.NickName</h3>
                        </li>

                        @if (IsCreator)
                        {
                            <li class="nav-item ml-1">
                                <button type="button" class="btn btn-primary" @onclick="Continue">Continuar Partida</button>
                            </li>
                        }
                        break;

                    case BazasState.Bid:
                        if (Game.CurrPlayer == player)
                        {
                            for (byte bid = 0; bid <= Game.CurrRoundCards; bid++)
                            {
                                if (Game.IsValidBid(player, bid))
                                {
                                    byte bc = bid;
                                    <li class="nav-item ml-1">
                                        <button class="btn btn-primary" @onclick="@(() => PlaceBid(bc))">Pedir @bid</button>
                                    </li>
                                }
                            }
                        }
                        else
                        {
                            <li class="nav-item ml-1">
                                <h3>Pide @Game.CurrPlayer.NickName</h3>
                            </li>
                        }
                        break;

                    case BazasState.Play:
                        if (Game.CurrPlayer == player)
                        {
                            <li class="nav-item ml-1">
                                <h3>Es tu turno<br /></h3>
                            </li>
                        }
                        else
                        {
                            <li class="nav-item ml-1">
                                <h3>Juega @Game.CurrPlayer.NickName</h3>
                            </li>
                        }
                        break;

                    case BazasState.GameFinished:
                        <li class="nav-item ml-1">
                            <h3>Partida ganada por @Game.GameWinner</h3>
                        </li>
                        break;

                }
            </ul>

            @switch (GameState)
            {
                case BazasState.Bid:
                case BazasState.Play:
                case BazasState.HandFinished:
                case BazasState.GameFinished:
                    <button class="btn btn-primary" type="button" @onclick="ToggleScoreboard">
                        Puntajes
                    </button>
                    break;
            }
        </div>
    </nav>
</div>

@if (GameState == BazasState.Bid && Game.CurrPlayer == player)
{
    <div class="collapse">
        <audio autoplay controls><source src="/sound/bid.wav" /></audio>
    </div>
}

@if (GameState == BazasState.Play && Game.CurrPlayer == player)
{
    <div class="collapse">
        <audio autoplay controls><source src="/sound/play.wav" /></audio>
    </div>
}

<!-- Scoreboard -->
@switch (GameState)
{
    case BazasState.Bid:
    case BazasState.Play:
    case BazasState.HandFinished:
    case BazasState.GameFinished:
        if (IsScoreboardVisible)
        {
            <div class="card card-body">
                <table class="table table-striped">
                    <thead>
                        <tr class="table-dark">
                            <th scope="col"></th>
                            @foreach (var p in Game.Players)
                            {
                                <th scope="col">@p.NickName</th>
                            }
                        </tr>
                    </thead>

                    <tbody>
                        @for (var index = 0; index < Game.Scoreboard.Rounds.Length; index++)
                        {
                            var r = Game.Scoreboard.Rounds[index];
                            <tr>
                                <td scope="col">@BazasConsts.RoundCards[index]</td>

                                @for (var i = 0; i < Game.Players.Count; i++)
                                {
                                    <td>@r.Player[i]</td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        break;
}


<!-- Cards -->
@switch (GameState)
{
    case BazasState.Bid:
    case BazasState.Play:
    case BazasState.HandFinished:
        <table>
            <tr>
                <td style="width:150px">
                    <h4 class="text-center"> Triunfo</h4>
                </td>

                @if (Game.HandPlayers != null)
                {
                    foreach (var player in Game.HandPlayers)
                    {
                        var score = Game.GetPlayerScore(player);
                        <td style="min-width:120px; padding: 0px 5px 0px 5px; align-content:center;">
                            <h4 class="text-center">@player?.NickName</h4>
                            <div class="row">
                                <div class="col"><h5>@score.AskedAndDone</h5></div>
                                <div class="col text-center"><h5>@score.CurrScore</h5></div>
                            </div>
                        </td>
                    }
                }
            </tr>
            <tr>
                <td style="width:150px;text-align:center">
                    <img width="100" height="125" src=@Game.GetCardFile(Game.Triunfo) />
                </td>

                @if (Game.HandCards != null)
                {
                    foreach (var card in Game.HandCards)
                    {
                        <td style="min-width:120px;text-align:center">
                            <img width="100" height="125" src=@Game.GetCardFile(card) />
                        </td>
                    }
                }
            </tr>
        </table>

        if (Cards != null)
        {
            <hr />
            <h3>Tus cartas:</h3>
            foreach (var card in Cards)
            {
                <img width="100" height="125" src=@Game.GetCardFile(card) @onclick="@(()=> PlayCard(card))" />
            }
        }
        break;
}

@code {

    [Parameter]
    public string Uid { get; set; }

    public bool IsCreator { get; private set; }

    public BazasGame Game => game;

    public BazasState GameState => Game?.State ?? BazasState.Build;

    public int PlayersNumber => Game?.PlayersNumber ?? 0;

    public string PlayersListText => Game?.PlayersListText;

    public string PlayerNickName { get => player.NickName; set => player.NickName = value; }

    public string InputNickName { get; set; }

    public bool IsScoreboardVisible { get; set; }

    public List<EnglishCard> Cards { get; private set; }

    public int CurrentBid
    {
        get => currentBid;
        set
        {
            currentBid = value;
            SafeAction(() => game.PlaceBid(player, value));
        }
    }

    private int currentBid;

    private static readonly Dictionary<string, BazasGame> cache = new Dictionary<string, BazasGame>();

    private Player player;

    private BazasGame game;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        player = new Player();

        if (!cache.TryGetValue(Uid, out game))
        {
            game = new BazasGame();
            cache.Add(Uid, game);
            IsCreator = true;
        }

        SafeAction(() =>
        {
            game.OnStateChanged += OnGameStateChanged;
            game.AddPlayer(player);
        });
    }

    public void SetNickName()
    {
        PlayerNickName = InputNickName;
    }

    public void Start()
    {
        SafeAction(Game.Start);
    }

    public void Continue()
    {
        SafeAction(Game.Continue);
    }

    public void ToggleScoreboard()
    {
        IsScoreboardVisible = !IsScoreboardVisible;
        InvokeAsync(() => StateHasChanged());
    }

    public void PlayCard(EnglishCard card)
    {
        SafeAction(() => Game.PlayCard(player, card));
    }

    public void PlaceBid(byte bid)
    {
        SafeAction(() => game.PlaceBid(player, bid));
    }

    protected override void DoCloseAll()
    {
        if (Game != null)
        {
            Game.OnStateChanged -= OnGameStateChanged;
            Game.RemovePlayer(player);
        }

        base.DoCloseAll();
    }

    private void SafeAction(Action action)
    {
        try
        {
            action();
        }
        catch (Exception x)
        {
            Alert(x.Message);
        }
    }

    private void Alert(string message)
    {
        jsRuntime.InvokeAsync<object>("blazorExtensions.ShowAlert", message);
    }

    private void OnGameStateChanged(object sender, EventArgs e)
    {
        switch (Game.State)
        {
            case BazasState.Bid:
                Cards = Game.GetCards(player);
                break;
        }

        InvokeAsync(() => StateHasChanged());
    }
}
