@page "/bazas/{uid}"
@using Bazurtas.Model;
@using CardGames;
@using CardGames.Bazas;
@inherits GamePage

<div class="main">
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="navbar-collapse align-middle">
            <ul class="navbar-nav mr-auto">
                <li />
                <li class="nav-item mr-2">
                    <h3>@player.NickName &#124;</h3>
                </li>

                @if (string.IsNullOrEmpty(PlayerNickName) || GameState == BazasState.Build)
                {
                    <li class="nav-item my-2 my-lg-0">
                        <div class="form-inline">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="basic-addon1">Ingresa tu nombre</span>
                            </div>
                            <input class="form-control mr-sm-2" type="text" placeholder="" aria-label="NickGame" @bind="InputNickName" @bind:event="oninput" @onkeyup="KeyPressed">
                            <button type="button" class="btn btn-primary" @onclick="SetNickName">Asignar</button>
                        </div>
                    </li>

                    @if (IsCreator)
                    {
                        <li class="nav-item ml-1">
                            <button type="button" class="btn btn-primary" @onclick="Start">Iniciar Partida</button>
                        </li>
                    }

                    <li class="nav-item ml-2">
                        <h3>Jugadores: @PlayersListText (@PlayersNumber)</h3>
                    </li>
                }
                else
                {
                    switch (GameState)
                    {
                        case BazasState.HandFinished:
                            <li class="nav-item ml-1">
                                <h3>Baza ganada por @Game.HandWinner?.NickName</h3>
                            </li>

                            @if (IsCreator)
                            {
                                <li class="nav-item ml-1">
                                    <button type="button" class="btn btn-primary" @onclick="Continue">Continuar Partida</button>
                                </li>
                            }
                            break;

                        case BazasState.Bid:
                            if (Game.CurrPlayer == player)
                            {
                                for (byte bid = 0; bid <= Game.CurrRoundCards; bid++)
                                {
                                    if (Game.IsValidBid(player, bid))
                                    {
                                        byte bc = bid;
                                        <li class="nav-item ml-1">
                                            <button class="btn btn-primary" @onclick="@(() => PlaceBid(bc))">Pedir @bid</button>
                                        </li>
                                    }
                                }
                            }
                            else
                            {
                                <li class="nav-item ml-1">
                                    <h3>Pide @Game.CurrPlayer.NickName</h3>
                                </li>
                            }
                            break;

                        case BazasState.Play:
                            if (Game.CurrPlayer == player)
                            {
                                <li class="alert alert-success">
                                    <h3>Es tu turno</h3>
                                </li>
                            }
                            else
                            {
                                <li class="nav-item ml-1">
                                    <h3>Juega @Game.CurrPlayer.NickName</h3>
                                </li>
                            }
                            break;
                    }
                }
            </ul>

            @switch (GameState)
            {
                case BazasState.Bid:
                case BazasState.Play:
                case BazasState.HandFinished:
                    <button class="btn btn-primary" type="button" @onclick="ToggleScoreboard">
                        Puntajes
                    </button>
                    break;
            }
        </div>
    </nav>
</div>

<!-- Audio -->
@{
    string file = null;

    switch (GameState)
    {
        case BazasState.Bid:
            if (Game.CurrPlayer == player)
            {
                file = "/sound/bid.wav";
            }
            break;

        case BazasState.Play:
            if (Game.CurrPlayer == player)
            {
                file = "/sound/play.wav";
            }
            break;

        case BazasState.GameFinished:
            file = PlayerWon ? "/sound/YouWin.wav" : "/sound/YouLose.wav";
            break;
    }

    if (file != null)
    {
        <div class="collapse">
            <audio autoplay controls><source src="@file" /></audio>
        </div>
    }
}

<!-- Scoreboard -->
@if (IsScoreboardVisible)
{
    <div class="modal-xl" tabindex="-1" role="dialog" style="display:block">
        <div class="modal-dialog" role="document">
            <div class="modal-content" style="min-width:440px;width:@(110 + Game.PlayersNumber * 110)px">
                <div class="modal-header">
                    @if (GameState != BazasState.GameFinished)
                    {
                        <h5 class="modal-title">Puntajes</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="ToggleScoreboard">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    }
                    else if (PlayerWon)
                    {
                        <div class="alert alert-success">
                            <h3>Ganaste la partida capooo!!</h3>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-danger">
                            <h3>Partida ganada por @Game.GameWinner</h3>
                        </div>
                    }
                </div>
                <div class="modal-body">
                    <div class="card card-body">
                        <table class="table table-bordered">
                            <thead>
                                <tr class="table-dark">
                                    <th scope="col"></th>
                                    @if (GameState == BazasState.Build)
                                    {
                                        for (var i = 1; i <= 3; i++)
                                        {
                                            <th scope="col">@("Player " + i)</th>
                                        }
                                    }
                                    else
                                    {
                                        foreach (var p in Game.Players)
                                        {
                                            <th scope="col">@p.NickName</th>
                                        }
                                    }
                                </tr>
                            </thead>

                            <tbody>
                                @for (var index = 0; index < BazasConsts.RoundsNumber; index++)
                                {
                                    var rc = index == Game.CurrRound ? "bg-warning" : "";
                                    <tr class="@rc">
                                        <th scope="row">@BazasConsts.RoundCards[index]</th>

                                        @{
                                            var count = GameState == BazasState.Build ? 3 : Game.PlayersNumber;
                                            for (var i = 0; i < count; i++)
                                            {
                                                var tc = index % count == i ? "bg-success" : "";
                                                var score = Game.Scoreboard?.Rounds[index].Player[i] ?? new BazasScoreboardRoundPlayer { Bid = 1, Bazas = (byte)i, Score = 123 };
                                                var bazasClass = score.Bazas != score.Bid ? "danger" : "success";

                                                <td scope="col" class="@tc">
                                                    <div class="pl-3 row">
                                                        <span class="badge badge-@bazasClass">@score.Bazas</span>/<span class="badge badge-secondary">@score.Bid</span>
                                                        <span class="col text-right">@score.CurrScore</span>
                                                    </div>
                                                </td>
                                            }
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@if (!string.IsNullOrEmpty(Game.ViewersListText))
{
    <p class="text-right">
        Usuarios mirando: <b>@Game.ViewersListText</b>
    </p>
}

<!-- Cards -->
@switch (GameState)
{
    case BazasState.Bid:
    case BazasState.Play:
    case BazasState.HandFinished:
        <div class="container">
            <div>
                @{
                    var count = BazasConsts.RoundCards[Game.CurrRound];
                    var text = $"Mano #{Game.CurrRound + 1}, {Game.RoundBid} pedidas de {count}, ";
                    if (Game.RoundBid != count)
                    {
                        text += (Game.RoundBid < count ? "SOBRAN " : "FALTAN ") + Math.Abs(Game.RoundBid - count);
                    }
                    <h3>@text</h3>
                }
            </div>
            <table class="table table-bordered table-sm">
                <tbody>
                    <tr>
                        <td style="width:150px">
                            <div class="text-center"><h4>Triunfo</h4></div>
                        </td>

                        @if (Game.HandPlayers != null)
                        {
                            foreach (var player in Game.HandPlayers)
                            {
                                var score = Game.GetPlayerScore(player);
                                var nameClass = !player.IsConnected ? "danger" : player == Game.CurrPlayer ? "success" : "light";
                                var bazasClass = score.Bazas > score.Bid ? "danger" : score.Bazas == score.Bid ? "success" : "secondary";

                                <td>
                                    <h4 class="text-center"><span class="badge badge-@nameClass">@player?.NickName</span></h4>
                                    <div class="row pl-3">
                                        <h4><span class="badge badge-@bazasClass">@score.Bazas</span>/<span class="badge badge-secondary">@score.Bid</span></h4>
                                        <h3 class="col text-right">@score.CurrScore</h3>
                                    </div>
                                </td>
                            }
                        }
                    </tr>
                    <tr>
                        <td style="width:150px;text-align:center">
                            <img width="100" height="125" src=@Game.GetCardFile(Game.Triunfo) />
                        </td>

                        @if (Game.HandCards != null)
                        {
                            foreach (var card in Game.HandCards)
                            {
                                <td style="min-width:120px;text-align:center">
                                    <img width="100" height="125" src=@Game.GetCardFile(card) />
                                </td>
                            }
                        }
                    </tr>
                </tbody>
            </table>
        </div>

        @if (Cards != null)
        {
            <hr />
            <div class="container">
                <h3>Tus cartas:</h3>
                @foreach (var card in Cards)
                {
                    <img width="100" height="125" src=@Game.GetCardFile(card) @onclick="@(()=> PlayCard(card))" />
                }
            </div>
        }
        break;
}

@code {

    [Parameter]
    public string Uid { get; set; }

    public bool IsCreator { get; private set; }

    public BazasGame Game => game;

    public BazasState GameState => Game?.State ?? BazasState.Build;

    public int PlayersNumber => Game?.PlayersNumber ?? 0;

    public string PlayersListText => Game?.PlayersListText;

    public string PlayerNickName { get => player.NickName; set => player.NickName = value; }

    public string InputNickName { get; set; }

    public bool IsScoreboardVisible => isScoreboardVisible || GameState == BazasState.GameFinished;

    private bool isScoreboardVisible;

    public List<EnglishCard> Cards { get; private set; }

    public int CurrentBid
    {
        get => currentBid;
        set
        {
            currentBid = value;
            SafeAction(() => game.PlaceBid(player, value));
        }
    }

    private int currentBid;

    public bool PlayerWon => Game?.GameWinners.Contains(player) ?? false;

    private static readonly Dictionary<string, BazasGame> cache = new Dictionary<string, BazasGame>();

    private Player player;

    private BazasGame game;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        player = new Player();

        if (!cache.TryGetValue(Uid, out game))
        {
            game = new BazasGame();
            cache.Add(Uid, game);
            IsCreator = true;
        }

        game.OnStateChanged += OnGameStateChanged;
    }

    protected override void OnComponentReady()
    {
        base.OnComponentReady();
        GetCookie(CookieUserNickName, (s) => SetNickNameFromCookie(s));
    }

    public void KeyPressed(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SetNickName();
        }
    }

    public void SetNickName()
    {
        PlayerNickName = InputNickName;
        JoinGame();
        SetCookie(CookieUserNickName, InputNickName);
    }

    protected void SetNickNameFromCookie(string text)
    {
        PlayerNickName = text;
        JoinGame();
        StateHasChanged();
    }

    private void JoinGame()
    {
        if (!string.IsNullOrEmpty(PlayerNickName))
        {
            SafeAction(() =>
            {
                game.AddPlayer(player);
                if (game.State != BazasState.Build)
                {
                    GetCards();
                }
            });
        }
    }

    public void Start()
    {
        SafeAction(Game.Start);
    }

    public void Continue()
    {
        SafeAction(Game.Continue);
    }

    public void ToggleScoreboard()
    {
        isScoreboardVisible = !isScoreboardVisible;
        InvokeAsync(() => StateHasChanged());
    }

    public void PlayCard(EnglishCard card)
    {
        SafeAction(() => Game.PlayCard(player, card));
    }

    public void PlaceBid(byte bid)
    {
        SafeAction(() => game.PlaceBid(player, bid));
    }

    protected override void DoCloseAll()
    {
        if (Game != null)
        {
            Game.OnStateChanged -= OnGameStateChanged;
            Game.RemovePlayer(player);
        }

        base.DoCloseAll();
    }

    private void OnGameStateChanged(object sender, EventArgs e)
    {
        switch (Game.State)
        {
            case BazasState.Bid:
                GetCards();
                break;
        }

        InvokeAsync(() => StateHasChanged());
    }

    private void GetCards()
    {
        Cards = Game.GetCards(player);
    }
}
