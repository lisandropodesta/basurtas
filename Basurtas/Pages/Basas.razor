@page "/basas/{uid}"
@using Basurtas.Model;
@using CardGames;
@using CardGames.Basas;
@inherits GamePage
@inject IJSRuntime jsRuntime

<h1>Basurtas</h1>

<!-- Input name -->
@switch (GameState)
{
    case BasasState.Build:
        <hr />
        <h3>Cantidad de jugadores: @PlayersListText (@PlayersNumber)</h3>

        <p>
            Nombre:
            <input type="text" @bind="PlayerNickName" /><br />
        </p>

        @if (@IsCreator)
        {
            <button class="btn btn-primary" @onclick="Start">Iniciar juego!</button>
        }
        break;

    case BasasState.HandFinished:
        @if (@IsCreator)
        {
            <button class="btn btn-primary" @onclick="Continue">Continuar</button>
        }
        break;
}

<!-- Cards -->
@switch (GameState)
{
    case BasasState.Bid:
    case BasasState.Play:
    case BasasState.HandFinished:
        <hr />
        <table>
            <tr>
                <td><h3> Triunfo</h3></td>
                @if (Game.HandPlayers != null)
                {
                    foreach (var player in Game.HandPlayers)
                    {
                        <td><h3>@player?.NickName</h3></td>
                    }
                }
            </tr>
            <tr>
                <td>
                    <img src=@Game.GetCardFile(Game.Triunfo) />
                </td>

                @if (Game.HandCards != null)
                {
                    foreach (var card in Game.HandCards)
                    {
                        <td><img src=@Game.GetCardFile(card) /></td>
                    }
                }
            </tr>
        </table>

        if (Cards != null)
        {
            <hr />
            <h3>Tus cartas:</h3>
            foreach (var card in Cards)
            {
                <img src=@Game.GetCardFile(card) @onclick="@(()=> PlayCard(card))" />
            }
        }
        break;
}

<hr />

<!-- Bid/Play -->
@switch (GameState)
{
    case BasasState.Bid:
        if (Game.CurrPlayer == player)
        {
            for (byte bid = 0; bid <= Game.CurrRoundCards; bid++)
            {
                if (Game.IsValidBid(player, bid))
                {
                    byte bc = bid;
                    <button class="btn btn-primary" @onclick="@(() => PlaceBid(bc))">Pedir @bid</button>
                }
            }
        }
        else
        {
            <p>Jugador pidiendo: @Game.CurrPlayer?.NickName</p>
        }
        break;

    case BasasState.Play:
        if (Game.CurrPlayer == player)
        {
            <h3>Es tu turno<br /></h3>
        }
        else
        {
            <h4>Turno de @Game.CurrPlayer.NickName</h4>
        }
        break;
}

<!-- Scoreboard -->
@switch (GameState)
{
    case BasasState.Bid:
    case BasasState.Play:
    case BasasState.HandFinished:
        <hr />
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col"></th>
                    @foreach (var p in Game.Players)
                    {
                        <th scope="col">@p.NickName</th>
                    }
                </tr>
            </thead>

            <tbody>
                @for (var index = 0; index < Game.Scoreboard.Rounds.Length; index++)
                {
                    var r = Game.Scoreboard.Rounds[index];
                    <tr>
                        <td scope="col">@BasasConsts.RoundCards[index]</td>

                        @for (var i = 0; i < Game.Players.Count; i++)
                        {
                            <td>@r.Player[i].Bid / @r.Player[i].Basas / @r.Player[i].Score</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
        break;
}

@code {

    [Parameter]
    public string Uid { get; set; }

    public BasasGame Game => game;

    public BasasState GameState => Game?.State ?? BasasState.Build;

    public int PlayersNumber => Game?.PlayersNumber ?? 0;

    public string PlayersListText => Game?.PlayersListText;

    public bool IsCreator { get; private set; }

    public string PlayerNickName { get => player.NickName; set => player.NickName = value; }

    public List<EnglishCard> Cards { get; private set; }

    public int CurrentBid
    {
        get => currentBid;
        set
        {
            currentBid = value;
            SafeAction(() => game.PlaceBid(player, value));
        }
    }

    public int currentBid;

    private static readonly Dictionary<string, BasasGame> cache = new Dictionary<string, BasasGame>();

    private Player player;

    private BasasGame game;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        player = new Player();

        if (!cache.TryGetValue(Uid, out game))
        {
            game = new BasasGame();
            cache.Add(Uid, game);
            IsCreator = true;
        }

        SafeAction(() =>
        {
            game.OnStateChanged += OnGameStateChanged;
            game.AddPlayer(player);
        });
    }

    public void Start()
    {
        SafeAction(Game.Start);
    }

    public void Continue()
    {
        SafeAction(Game.Continue);
    }

    public void PlayCard(EnglishCard card)
    {
        SafeAction(() => Game.PlayCard(player, card));
    }

    public void PlaceBid(byte bid)
    {
        SafeAction(() => game.PlaceBid(player, bid));
    }

    protected override void DoCloseAll()
    {
        if (Game != null)
        {
            Game.OnStateChanged -= OnGameStateChanged;
            Game.RemovePlayer(player);
        }

        base.DoCloseAll();
    }

    private void SafeAction(Action action)
    {
        try
        {
            action();
        }
        catch (Exception x)
        {
            jsRuntime.InvokeAsync<object>("ShowAlert", x.Message);
        }
    }

    private void OnGameStateChanged(object sender, EventArgs e)
    {
        switch (Game.State)
        {
            case BasasState.Bid:
                Cards = Game.GetCards(player);
                break;
        }

        InvokeAsync(() => StateHasChanged());
    }
}
